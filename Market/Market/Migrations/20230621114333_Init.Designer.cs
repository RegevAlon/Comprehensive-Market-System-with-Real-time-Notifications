// <auto-generated />
using System;
using Market.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Market.Migrations
{
    [DbContext(typeof(MarketContext))]
    [Migration("20230621114333_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Market.DataLayer.AgreementAnswerDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PendingAgreementDTOAppointeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PendingAgreementDTOShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PendingAgreementDTOShopId", "PendingAgreementDTOAppointeeId");

                    b.ToTable("Agreement answers");
                });

            modelBuilder.Entity("Market.DataLayer.BidAnswerDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BidDTOBiddingMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("BidDTOProductId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BidDTOProductId", "BidDTOBiddingMemberId");

                    b.ToTable("Bids Answers");
                });

            modelBuilder.Entity("Market.DataLayer.BidDTO", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("BiddingMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("BidderApproved")
                        .HasColumnType("bit")
                        .HasColumnName("BidderApproved");

                    b.Property<int?>("ProductDTOId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<double>("SuggestedPrice")
                        .HasColumnType("float")
                        .HasColumnName("SuggestedPrice");

                    b.HasKey("ProductId", "BiddingMemberId");

                    b.HasIndex("ProductDTOId");

                    b.HasIndex("ProductId", "BiddingMemberId")
                        .IsUnique();

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.AppointeesDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointeeId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentDTOMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentDTOShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointeeId");

                    b.HasIndex("AppointmentDTOMemberId", "AppointmentDTOShopId");

                    b.ToTable("Appointees");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.AppointmentDTO", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointerId")
                        .HasColumnType("int");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId", "ShopId");

                    b.HasIndex("AppointerId");

                    b.HasIndex("MemberId", "ShopId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.BasketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartDTOId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartDTOId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.BasketItemDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BasketDTOId")
                        .HasColumnType("int");

                    b.Property<double>("PriceAfterDiscount")
                        .HasColumnType("float");

                    b.Property<double>("PriceBeforeDiscount")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketDTOId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.EventDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ListenerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListenerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.MemberDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.MessageDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MemberDTOId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberDTOId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.PolicyDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountCompositePolicyDTOId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicySubjectId")
                        .HasColumnType("int");

                    b.Property<int>("RuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopDTOId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountCompositePolicyDTOId");

                    b.HasIndex("PolicySubjectId");

                    b.HasIndex("ShopDTOId");

                    b.ToTable("Policies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PolicyDTO");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.PolicySubjectDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Policy Subjects");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ProductDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SellMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopDTOId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopDTOId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.PurchaseDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PurchaseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopDTOId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartPurchaseDTOId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopDTOId");

                    b.HasIndex("ShoppingCartPurchaseDTOId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.PurchasedItemDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("PriceAfterDiscount")
                        .HasColumnType("float");

                    b.Property<double>("PriceBeforeDiscount")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseDTOId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseDTOId");

                    b.ToTable("Purchesed Items");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ReviewDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductDTOId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("ReviewerUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDTOId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.RuleDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CompositeRuleDTOId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopDTOId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompositeRuleDTOId");

                    b.HasIndex("ShopDTOId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Rules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RuleDTO");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.RuleSubjectDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rule Subjects");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShopDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShoppingCartDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseIdFactory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShoppingCartPurchaseDTO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberDTOId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PurchaseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberDTOId");

                    b.ToTable("ShoppingCart Purhcase");
                });

            modelBuilder.Entity("Market.DataLayer.PendingAgreementDTO", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("AppointeeId")
                        .HasColumnType("int");

                    b.Property<int>("AppointerId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopDTOId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "AppointeeId");

                    b.HasIndex("ShopDTOId");

                    b.HasIndex("ShopId", "AppointeeId")
                        .IsUnique();

                    b.ToTable("Pending Agreements");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.DiscountPolicyDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Policies.PolicyDTO");

                    b.Property<double>("Precentage")
                        .HasColumnType("float");

                    b.ToTable("Policies");

                    b.HasDiscriminator().HasValue("DiscountPolicy");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.PurchasePolicyDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Policies.PolicyDTO");

                    b.ToTable("Policies");

                    b.HasDiscriminator().HasValue("PurchasePolicy");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.CompositeRuleDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Rules.RuleDTO");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Rules");

                    b.HasDiscriminator().HasValue("CompositeRule");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.QuantityRuleDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Rules.RuleDTO");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.ToTable("Rules");

                    b.HasDiscriminator().HasValue("QuantityRule");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.SimpleRuleDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Rules.RuleDTO");

                    b.ToTable("Rules");

                    b.HasDiscriminator().HasValue("SimpleRule");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.TotalPriceRuleDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Rules.RuleDTO");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.ToTable("Rules");

                    b.HasDiscriminator().HasValue("TotalPriceRule");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.DiscountCompositePolicyDTO", b =>
                {
                    b.HasBaseType("Market.DataLayer.DTOs.Policies.DiscountPolicyDTO");

                    b.Property<string>("NumericOperator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Policies");

                    b.HasDiscriminator().HasValue("CompositeDiscountPolicy");
                });

            modelBuilder.Entity("Market.DataLayer.AgreementAnswerDTO", b =>
                {
                    b.HasOne("Market.DataLayer.PendingAgreementDTO", null)
                        .WithMany("Answers")
                        .HasForeignKey("PendingAgreementDTOShopId", "PendingAgreementDTOAppointeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.BidAnswerDTO", b =>
                {
                    b.HasOne("Market.DataLayer.BidDTO", null)
                        .WithMany("Answers")
                        .HasForeignKey("BidDTOProductId", "BidDTOBiddingMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.BidDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ProductDTO", null)
                        .WithMany("Bids")
                        .HasForeignKey("ProductDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.AppointeesDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.MemberDTO", "Appointee")
                        .WithMany()
                        .HasForeignKey("AppointeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.DataLayer.DTOs.AppointmentDTO", null)
                        .WithMany("Appointees")
                        .HasForeignKey("AppointmentDTOMemberId", "AppointmentDTOShopId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Appointee");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.AppointmentDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.MemberDTO", "Appointer")
                        .WithMany()
                        .HasForeignKey("AppointerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Appointer");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.BasketDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ShoppingCartDTO", null)
                        .WithMany("Baskets")
                        .HasForeignKey("ShoppingCartDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.BasketItemDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.BasketDTO", null)
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketDTOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Market.DataLayer.DTOs.ProductDTO", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.EventDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.MemberDTO", "Listener")
                        .WithMany()
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listener");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.MemberDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ShoppingCartDTO", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.MessageDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.MemberDTO", null)
                        .WithMany("Messages")
                        .HasForeignKey("MemberDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.PolicyDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.Policies.DiscountCompositePolicyDTO", null)
                        .WithMany("Policies")
                        .HasForeignKey("DiscountCompositePolicyDTOId");

                    b.HasOne("Market.DataLayer.DTOs.Policies.PolicySubjectDTO", "PolicySubject")
                        .WithMany()
                        .HasForeignKey("PolicySubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.DataLayer.DTOs.ShopDTO", null)
                        .WithMany("Policies")
                        .HasForeignKey("ShopDTOId");

                    b.Navigation("PolicySubject");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.PolicySubjectDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ProductDTO", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ProductDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ShopDTO", null)
                        .WithMany("Products")
                        .HasForeignKey("ShopDTOId");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.PurchaseDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ShopDTO", null)
                        .WithMany("Purchases")
                        .HasForeignKey("ShopDTOId");

                    b.HasOne("Market.DataLayer.DTOs.ShoppingCartPurchaseDTO", null)
                        .WithMany("ShopsPurchases")
                        .HasForeignKey("ShoppingCartPurchaseDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.PurchasedItemDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.PurchaseDTO", null)
                        .WithMany("PurchasedItems")
                        .HasForeignKey("PurchaseDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ReviewDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ProductDTO", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductDTOId");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.RuleDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.Rules.CompositeRuleDTO", null)
                        .WithMany("Rules")
                        .HasForeignKey("CompositeRuleDTOId");

                    b.HasOne("Market.DataLayer.DTOs.ShopDTO", null)
                        .WithMany("Rules")
                        .HasForeignKey("ShopDTOId");

                    b.HasOne("Market.DataLayer.DTOs.Rules.RuleSubjectDTO", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.RuleSubjectDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ProductDTO", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShoppingCartPurchaseDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.MemberDTO", null)
                        .WithMany("ShoppingCartPurchases")
                        .HasForeignKey("MemberDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.PendingAgreementDTO", b =>
                {
                    b.HasOne("Market.DataLayer.DTOs.ShopDTO", null)
                        .WithMany("PendingAgreements")
                        .HasForeignKey("ShopDTOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.DataLayer.BidDTO", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.AppointmentDTO", b =>
                {
                    b.Navigation("Appointees");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.BasketDTO", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.MemberDTO", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ShoppingCartPurchases");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ProductDTO", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.PurchaseDTO", b =>
                {
                    b.Navigation("PurchasedItems");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShopDTO", b =>
                {
                    b.Navigation("PendingAgreements");

                    b.Navigation("Policies");

                    b.Navigation("Products");

                    b.Navigation("Purchases");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShoppingCartDTO", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.ShoppingCartPurchaseDTO", b =>
                {
                    b.Navigation("ShopsPurchases");
                });

            modelBuilder.Entity("Market.DataLayer.PendingAgreementDTO", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Rules.CompositeRuleDTO", b =>
                {
                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Market.DataLayer.DTOs.Policies.DiscountCompositePolicyDTO", b =>
                {
                    b.Navigation("Policies");
                });
#pragma warning restore 612, 618
        }
    }
}
